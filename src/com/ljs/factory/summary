1、为什么要用工厂模式
    例如io的操作
    //创建一个BufferedReader对象，包装字符流，将字符流放入缓存里
    BufferedReader bf = new BufferedReader(new FileReader(new File("aa.txt")));
    如果只有一个类用到BufferedReader对象的话不麻烦，但是如果有很多类里都有这语句呢？
    例如FileOperateA，FileOperateB, FileOperateC 三个类里都用到这句话，如果上头要修改
    成LineNumberReader，这样太麻烦。
2、怎么使用工厂模式
    2.1、创建一个工厂类
    2.2、创建一个返回BufferedRead对象的静态方法
3、工厂模式的好处
    3.1我们修改具体实现类(工厂类),对客户端(调用方)而言是完全不用修改的
    3.2解耦，如果我们使用new的方式来创建对象的话，那么我们会说new出来的这个对象
    和当前客户端(调用方)耦合了。也就是当前客户端(调用方)依赖这个new出来的对象
4、三种模式
    4.1简单/静态工厂模式
        步骤：只有一个工厂类
        优点：代码少
        缺点：扩展性差，增加产品就得修改工厂类
    4.2工厂方法模式
        步骤：1定义一个构造者抽象类或者接口AnimalFactory，其中一个抽象工厂方法
              2具体构造者CatFactory，DogFactory，实现构造者抽象类的工厂方法，返回具体产品
              3产品接口Animal
              4具体产品Dog，Cat
        优点：1客户端(Factory2)不需要在负责对象的创建，明确了各个类的职责
                只需要创建对应工厂类，调用对应工厂方法
              2如果有新的对象增加，只能增加一个具体的类和具体的工厂类即可(例如增加
              一个老鼠工厂类继承AnimalFactory，并且定义一个老鼠产品类实现Animal)
              3不会影响已有的代码，后期维护容易，增强系统的扩展性
        缺点：编写代码多
    4.3抽象工厂模式